//
//  PRLiOSPaintCodeStyleKit.m
//  PaintCode StyleKit for iOS
//
//  Created by Kevin Hayes on 2014-10-22.
//  Copyright (c) 2014 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PRLStyleKit.h"


@implementation PRLiOSPaintCodeStyleKit

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawSignalMeterWithSignalMeterColor: (UIColor*)signalMeterColor signalFrameSize: (CGSize)signalFrameSize animationFrame: (CGFloat)animationFrame
{
    //// Color Declarations
    UIColor* signalMeterDisabledColor = [signalMeterColor colorWithAlphaComponent: 0.5];

    //// Variable Declarations
    CGFloat signalStrokeWidth = signalFrameSize.width / 14.50;
    UIColor* signalStroke1Opacity = fmod(fabs(animationFrame), 3) == 0 ? signalMeterColor : signalMeterDisabledColor;
    UIColor* signalStroke2Opacity = fmod(fabs(animationFrame), 3) == 1 ? signalMeterColor : signalMeterDisabledColor;
    UIColor* signalStroke3Opacity = fmod(fabs(animationFrame), 3) == 2 ? signalMeterColor : signalMeterDisabledColor;

    //// Frames
    CGRect frame = CGRectMake(0, 0, signalFrameSize.width, signalFrameSize.height);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.43103 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.43103 + 0.5), floor(CGRectGetWidth(frame) * 0.56897 + 0.5) - floor(CGRectGetWidth(frame) * 0.43103 + 0.5), floor(CGRectGetHeight(frame) * 0.56897 + 0.5) - floor(CGRectGetHeight(frame) * 0.43103 + 0.5))];
    [signalMeterColor setFill];
    [ovalPath fill];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = UIBezierPath.bezierPath;
    [oval2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.62191 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.38240 * CGRectGetHeight(frame))];
    [oval2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.62191 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62623 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.68925 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.44973 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.68925 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.55889 * CGRectGetHeight(frame))];
    oval2Path.lineCapStyle = kCGLineCapRound;

    [signalStroke1Opacity setStroke];
    oval2Path.lineWidth = signalStrokeWidth;
    [oval2Path stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = UIBezierPath.bezierPath;
    [oval3Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.37809 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62623 * CGRectGetHeight(frame))];
    [oval3Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.37809 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.38240 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.31075 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.55889 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.31075 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.44973 * CGRectGetHeight(frame))];
    oval3Path.lineCapStyle = kCGLineCapRound;

    [signalStroke1Opacity setStroke];
    oval3Path.lineWidth = signalStrokeWidth;
    [oval3Path stroke];


    //// Oval 4 Drawing
    UIBezierPath* oval4Path = UIBezierPath.bezierPath;
    [oval4Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.71945 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28486 * CGRectGetHeight(frame))];
    [oval4Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.71945 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72376 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.84064 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40606 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.84064 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60256 * CGRectGetHeight(frame))];
    oval4Path.lineCapStyle = kCGLineCapRound;

    [signalStroke2Opacity setStroke];
    oval4Path.lineWidth = signalStrokeWidth;
    [oval4Path stroke];


    //// Oval 5 Drawing
    UIBezierPath* oval5Path = UIBezierPath.bezierPath;
    [oval5Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.28055 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72376 * CGRectGetHeight(frame))];
    [oval5Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.28055 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28486 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15936 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.60256 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.15936 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.40606 * CGRectGetHeight(frame))];
    oval5Path.lineCapStyle = kCGLineCapRound;

    [signalStroke2Opacity setStroke];
    oval5Path.lineWidth = signalStrokeWidth;
    [oval5Path stroke];


    //// Oval 6 Drawing
    UIBezierPath* oval6Path = UIBezierPath.bezierPath;
    [oval6Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81698 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18733 * CGRectGetHeight(frame))];
    [oval6Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81698 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82129 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.99204 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.36239 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.99204 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.64623 * CGRectGetHeight(frame))];
    oval6Path.lineCapStyle = kCGLineCapRound;

    [signalStroke3Opacity setStroke];
    oval6Path.lineWidth = signalStrokeWidth;
    [oval6Path stroke];


    //// Oval 7 Drawing
    UIBezierPath* oval7Path = UIBezierPath.bezierPath;
    [oval7Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.18302 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82129 * CGRectGetHeight(frame))];
    [oval7Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.18302 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.18733 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00796 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.64623 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00796 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.36239 * CGRectGetHeight(frame))];
    oval7Path.lineCapStyle = kCGLineCapRound;

    [signalStroke3Opacity setStroke];
    oval7Path.lineWidth = signalStrokeWidth;
    [oval7Path stroke];
}

+ (void)drawSignalErrorConditionWithTintColor: (UIColor*)tintColor signalFrameSize: (CGSize)signalFrameSize
{

    //// Variable Declarations
    CGFloat signalStrokeWidth = signalFrameSize.width / 14.50;

    //// Frames
    CGRect frame = CGRectMake(0, 0, signalFrameSize.width, signalFrameSize.height);


    //// Caution Triangle Drawing
    UIBezierPath* cautionTrianglePath = UIBezierPath.bezierPath;
    [cautionTrianglePath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.49977 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.13578 * CGRectGetHeight(frame))];
    [cautionTrianglePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.92241 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.86638 * CGRectGetHeight(frame))];
    [cautionTrianglePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.07712 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.86638 * CGRectGetHeight(frame))];
    [cautionTrianglePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.49977 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.13578 * CGRectGetHeight(frame))];
    [cautionTrianglePath closePath];
    cautionTrianglePath.lineCapStyle = kCGLineCapRound;

    cautionTrianglePath.lineJoinStyle = kCGLineJoinRound;

    [tintColor setStroke];
    cautionTrianglePath.lineWidth = signalStrokeWidth;
    [cautionTrianglePath stroke];


    //// Text Drawing
    UIBezierPath* textPath = UIBezierPath.bezierPath;
    [textPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.54223 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.63685 * CGRectGetHeight(frame))];
    [textPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.45849 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.63685 * CGRectGetHeight(frame))];
    [textPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.45849 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37083 * CGRectGetHeight(frame))];
    [textPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.54223 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.37083 * CGRectGetHeight(frame))];
    [textPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.54223 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.63685 * CGRectGetHeight(frame))];
    [textPath closePath];
    [textPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44900 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71992 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.45291 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.69971 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.44900 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71281 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.45030 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.70607 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.46379 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68316 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.45551 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.69335 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.45914 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68783 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.48026 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67221 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.46845 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67848 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.47394 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67483 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50036 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.66828 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.48659 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.66959 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.49329 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.66828 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.52046 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67221 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.50743 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.66828 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.51413 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.66959 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53693 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68316 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.52679 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67483 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.53228 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.67848 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.54782 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.69971 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.54158 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.68783 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.54521 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.69335 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55172 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71992 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.55042 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.70607 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.55172 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71281 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.54782 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74012 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.55172 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72703 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.55042 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73376 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.53693 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75668 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.54521 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74648 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.54158 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75200 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.52046 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76762 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.53228 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76136 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.52679 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76500 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50036 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77155 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.51413 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77024 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.50743 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77155 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.48026 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76762 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.49329 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77155 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.48659 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77024 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.46379 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75668 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.47394 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76500 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.46845 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76136 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.45291 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74012 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.45914 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75200 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.45551 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74648 * CGRectGetHeight(frame))];
    [textPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44900 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71992 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.45030 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73376 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.44900 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72703 * CGRectGetHeight(frame))];
    [textPath closePath];
    [tintColor setFill];
    [textPath fill];
}

+ (void)drawSentSuccessWithTintColor: (UIColor*)tintColor signalFrameSize: (CGSize)signalFrameSize
{

    //// Variable Declarations
    CGFloat signalStrokeWidth = signalFrameSize.width / 14.50;

    //// Frames
    CGRect frame = CGRectMake(0, 0, signalFrameSize.width, signalFrameSize.height);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.23707 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57328 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.42672 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75431 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.35776 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.65517 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.42672 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.75431 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.76724 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24138 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.46121 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.58621 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.64224 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.34052 * CGRectGetHeight(frame))];
    bezierPath.lineCapStyle = kCGLineCapRound;

    bezierPath.lineJoinStyle = kCGLineJoinRound;

    [tintColor setStroke];
    bezierPath.lineWidth = signalStrokeWidth;
    [bezierPath stroke];
}

@end
